name: SonarQube scanner with cloning the repos
on:
  repository_dispatch:
    types: [sonar-scan]
env:
  OWNER: ${{ github.event.client_payload.OWNER }}
  REPOS: ${{ github.event.client_payload.REPOS }}
  PAT: ${{ github.event.client_payload.PAT }}
  REF: ${{ github.event.client_payload.REF }}
  bash_script: ${{ github.event.client_payload.bash_script}}
  node_version: ${{ github.event.client_payload.node_version}}
  projectKey: ${{ github.event.client_payload.projectKey}}
  projectBaseDir: ${{ github.event.client_payload.projectBaseDir}}
jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: check branch name
        run: echo the branch is  ${{ env.REF }}
      - name: clone and checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ env.OWNER }}/${{ env.REPOS }}"
          token: ${{ env.PAT }}
      - name: content of the repos
        run: |
          content=$( ls -l )
          echo the content is $content
      - name: run bash script if exists 
        if: ${{ env.bash_script != '' }}
        run: |
          echo "${{ env.bash_script }}" > script.sh
          chmod +x script.sh
          ./script.sh
      - name: setup NodeJS
        uses: actions/setup-node@v2.1.3
        with:
          node-version: ${{ env.node_version }} 
      - name: Install dependencies
        run: npm install 
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ env.projectKey }}
            -Dsonar.projectBaseDir=${{ env.projectBaseDir }}
            -Dsonar.exclusions=**/*.java
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Team notifier
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: " @everyone done the job"
